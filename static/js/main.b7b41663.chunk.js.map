{"version":3,"sources":["components/MemeGenerator/styledComponents.js","components/MemeGenerator/index.js","App.js","index.js"],"names":["AppContainer","styled","div","MemeGeneratorContainer","Heading","h1","FormAndMemeContainer","MemeContainer","props","backgroundImage","TextContent","p","activeFontSizeId","MemeGeneratorForm","form","CustomLabel","label","CustomInput","input","CustomSelect","select","CustomOption","option","GenerateButton","button","fontSizesOptionsList","optionId","displayText","MemeGenerator","state","backgroundImageUrlInput","topTextInput","bottomTextInput","activeFontSizeOptionId","backgroundImageUrl","topText","bottomText","onChangeBackgroundImage","event","setState","target","value","onChangeTopTextInput","onChangeBottomTextInput","onChangeFontSizeOptionID","onGenerateMeme","preventDefault","renderMemeGeneratorForm","onSubmit","htmlFor","type","id","onChange","placeholder","map","eachOption","renderMeme","this","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7b41663.chunk.js","sourcesContent":["import styled from 'styled-components/macro'\n\nexport const AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n`\nexport const MemeGeneratorContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 550px;\n  padding-top: 32px;\n  padding-right: 24px;\n  padding-bottom: 32px;\n  padding-left: 24px;\n  @media screen and (min-width: 768px) {\n    width: 85%;\n    max-width: 1140px;\n  }\n`\nexport const Heading = styled.h1`\n  color: #35469c;\n  font-family: 'Open Sans';\n  font-size: 24px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 16px;\n  @media screen and (min-width: 768px) {\n    font-size: 36px;\n    text-align: left;\n  }\n`\n\nexport const FormAndMemeContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  @media screen and (min-width: 768px) {\n    flex-direction: row-reverse;\n  }\n`\nexport const MemeContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  text-align: center;\n  background-image: url(${props => props.backgroundImage});\n  background-size: cover;\n  height: 300px;\n  padding-left: 10px;\n  padding-right: 10px;\n  margin-bottom: 50px;\n  @media screen and (min-width: 768px) {\n    width: 48%;\n    margin-top: 5px;\n    margin-bottom: 20px;\n  }\n`\nexport const TextContent = styled.p`\n  color: #ffffff;\n  font-size: ${props => props.activeFontSizeId}px;\n  font-weight: 600;\n  font-family: 'Open Sans';\n`\n\nexport const MemeGeneratorForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  @media screen and (min-width: 768px) {\n    width: 40%;\n  }\n`\n\nexport const CustomLabel = styled.label`\n  color: #7e858e;\n  font-family: 'Open Sans';\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 1.4;\n  margin-bottom: 0px;\n`\n\nexport const CustomInput = styled.input`\n  color: #5a7184;\n  background-color: #ffffff;\n  font-family: 'Open Sans';\n  height: 40px;\n  border: 1px solid #d7dfe9;\n  border-radius: 5px;\n  padding-top: 12px;\n  padding-right: 14px;\n  padding-bottom: 12px;\n  padding-left: 14px;\n  margin-top: 5px;\n  margin-bottom: 20px;\n  outline: none;\n`\n\nexport const CustomSelect = styled.select`\n  color: #1e293b;\n  background-color: #ffffff;\n  font-family: 'Open Sans';\n  height: 40px;\n  border: 1px solid #d7dfe9;\n  border-radius: 5px;\n  padding: 10px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  outline: none;\n`\nexport const CustomOption = styled.option`\n  font-size: 16px;\n  padding-top: 12px;\n  padding-right: 14px;\n  padding-bottom: 12px;\n  padding-left: 14px;\n`\n\nexport const GenerateButton = styled.button`\n  color: #ffffff;\n  background-color: #0b69ff;\n  font-family: 'Open Sans';\n  font-size: 14px;\n  font-weight: 600;\n  border-radius: 6px;\n  border: none;\n  min-width: 25px;\n  max-width: 150px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-right: 24px;\n  margin-top: 15px;\n  cursor: pointer;\n  outline: none;\n`\n","import {Component} from 'react'\n\nimport {\n  AppContainer,\n  MemeGeneratorContainer,\n  Heading,\n  FormAndMemeContainer,\n  MemeContainer,\n  TextContent,\n  MemeGeneratorForm,\n  CustomLabel,\n  CustomInput,\n  CustomSelect,\n  CustomOption,\n  GenerateButton,\n} from './styledComponents'\n\nconst fontSizesOptionsList = [\n  {\n    optionId: '8',\n    displayText: '8',\n  },\n  {\n    optionId: '12',\n    displayText: '12',\n  },\n  {\n    optionId: '16',\n    displayText: '16',\n  },\n  {\n    optionId: '20',\n    displayText: '20',\n  },\n  {\n    optionId: '24',\n    displayText: '24',\n  },\n  {\n    optionId: '28',\n    displayText: '28',\n  },\n  {\n    optionId: '32',\n    displayText: '32',\n  },\n]\n\nclass MemeGenerator extends Component {\n  state = {\n    backgroundImageUrlInput: '',\n    topTextInput: '',\n    bottomTextInput: '',\n    activeFontSizeOptionId: fontSizesOptionsList[0].optionId,\n    backgroundImageUrl: '',\n    topText: '',\n    bottomText: '',\n    activeFontSizeId: '',\n  }\n\n  onChangeBackgroundImage = event => {\n    this.setState({backgroundImageUrlInput: event.target.value})\n  }\n\n  onChangeTopTextInput = event => {\n    this.setState({topTextInput: event.target.value})\n  }\n\n  onChangeBottomTextInput = event => {\n    this.setState({bottomTextInput: event.target.value})\n  }\n\n  onChangeFontSizeOptionID = event => {\n    this.setState({activeFontSizeOptionId: event.target.value})\n  }\n\n  onGenerateMeme = event => {\n    event.preventDefault()\n    const {\n      backgroundImageUrlInput,\n      topTextInput,\n      bottomTextInput,\n      activeFontSizeOptionId,\n    } = this.state\n\n    this.setState({\n      backgroundImageUrl: backgroundImageUrlInput,\n      topText: topTextInput,\n      bottomText: bottomTextInput,\n      activeFontSizeId: activeFontSizeOptionId,\n    })\n  }\n\n  renderMemeGeneratorForm = () => {\n    const {\n      activeFontSizeOptionId,\n      backgroundImageUrlInput,\n      topTextInput,\n      bottomTextInput,\n    } = this.state\n\n    return (\n      <MemeGeneratorForm onSubmit={this.onGenerateMeme}>\n        <CustomLabel htmlFor=\"backgroundImageUrl\">Image URL</CustomLabel>\n        <CustomInput\n          type=\"text\"\n          id=\"backgroundImageUrl\"\n          value={backgroundImageUrlInput}\n          onChange={this.onChangeBackgroundImage}\n          placeholder=\"Enter the Image URL\"\n        />\n        <CustomLabel htmlFor=\"topText\">Top Text</CustomLabel>\n        <CustomInput\n          type=\"text\"\n          id=\"topText\"\n          value={topTextInput}\n          onChange={this.onChangeTopTextInput}\n          placeholder=\"Enter the Top Text\"\n        />\n        <CustomLabel htmlFor=\"topText\">Bottom Text</CustomLabel>\n        <CustomInput\n          type=\"text\"\n          id=\"bottomText\"\n          value={bottomTextInput}\n          onChange={this.onChangeBottomTextInput}\n          placeholder=\"Enter the Bottom Text\"\n        />\n        <CustomLabel htmlFor=\"select\">Font Size</CustomLabel>\n        <CustomSelect\n          id=\"select\"\n          value={activeFontSizeOptionId}\n          onChange={this.onChangeFontSizeOptionID}\n        >\n          {fontSizesOptionsList.map(eachOption => (\n            <CustomOption key={eachOption.optionId} value={eachOption.optionId}>\n              {eachOption.displayText}\n            </CustomOption>\n          ))}\n        </CustomSelect>\n        <GenerateButton type=\"submit\">Generate</GenerateButton>\n      </MemeGeneratorForm>\n    )\n  }\n\n  renderMeme = () => {\n    const {\n      backgroundImageUrl,\n      topText,\n      bottomText,\n      activeFontSizeId,\n    } = this.state\n\n    return (\n      <MemeContainer data-testid=\"meme\" backgroundImage={backgroundImageUrl}>\n        <TextContent activeFontSizeId={activeFontSizeId}>{topText}</TextContent>\n        <TextContent activeFontSizeId={activeFontSizeId}>\n          {bottomText}\n        </TextContent>\n      </MemeContainer>\n    )\n  }\n\n  render() {\n    return (\n      <AppContainer>\n        <MemeGeneratorContainer>\n          <Heading>Meme Generator</Heading>\n          <FormAndMemeContainer>\n            {this.renderMeme()}\n            {this.renderMemeGeneratorForm()}\n          </FormAndMemeContainer>\n        </MemeGeneratorContainer>\n      </AppContainer>\n    )\n  }\n}\n\nexport default MemeGenerator\n","import MemeGenerator from './components/MemeGenerator'\n\nimport './App.css'\n\nconst App = () => <MemeGenerator />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}